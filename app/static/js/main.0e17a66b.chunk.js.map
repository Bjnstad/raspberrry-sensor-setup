{"version":3,"sources":["components/Header/index.jsx","components/Footer/index.jsx","components/Config/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","React","Component","Footer","style","padding","textAlign","Config","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","ssid","psk","handlePsk","bind","assertThisInitialized","handleSsid","e","setState","target","value","preventDefault","_this$state","fetch","then","window","location","replace","catch","_this2","_this$state2","marginTop","FormControl_default","TextField_default","width","label","onChange","Button_default","variant","type","onClick","handleSubmit","App","react_router_dom","Header_Header","Config_Config","Footer_Footer","Boolean","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0e17a66b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <header className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <h4>\n                            Soilsense\n                        </h4>\n                    </div>\n                </div>\n            </header>\n        )\n    }\n}\n","import React from 'react';\n\nexport default class Footer extends React.Component {\n    render() {\n        return (\n            <footer style={{padding: '30px', textAlign: 'center'}}>\n                Soilsense                \n            </footer>\n        );\n    } \n}\n","import React from 'react';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nexport default class Config extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {ssid:\"\", psk: \"\"}\n        this.handlePsk = this.handlePsk.bind(this);\n        this.handleSsid = this.handleSsid.bind(this);\n    }\n    \n    handlePsk(e) {\n        \n    }\n\n    handleSsid(e) {\n        this.setState({\n            ssid: e.target.value\n        });\n    }\n\n    handleSubmit(e) {\n        e.preventDefault(); // Stop redirect\n        const { ssid, psk } = this.state;\n\n        fetch('127.0.0.1/cgi-bin/connect.cgi?ssid=' + ssid + '&psk=' + psk ).then(() => {\n            window.location.replace(\"https://soilsense.no/register\");\n        }).catch(() => {\n            window.location.replace(\"https://soilsense.no/register\");\n        });\n    }\n\n    render() {\n        const { ssid, psk } = this.state;\n        return (\n            <div className=\"container\" style={{marginTop: '60px'}}>\n                <div className=\"row\">\n                    \n                    <div className=\"col-6 offset-3\">\n                        <h1>\n                            Connect your device to Wifi\n                        </h1>\n                    </div>\n\n                </div>\n\n                <div className=\"row\">\n                    \n                    <div className=\"col-6 offset-3\">\n                        <FormControl>\n                            <div className=\"row\">\n    \n                                <div className=\"col-6\">\n                                    <TextField \n                                        style={{width: '100%'}}\n                                        label=\"SSID\"\n                                        value={ssid}\n                                        onChange={(e) => this.handleSsid(e)}\n                                    />\n                                </div>\n\n                                <div className=\"col-6\">\n                                    <TextField \n                                        style={{width: '100%'}}\n                                        label=\"Password\"\n                                        value={psk}\n                                        onChange={(e) => this.handlePsk(e)}\n                                    />\n                                </div>\n            \n                                <div className=\"col-12\" style={{textAlign:'right', marginTop: '15px'}}>\n                                    <Button variant=\"contained\" type=\"submit\" onClick={(e) => this.handleSubmit(e)}>\n                                        Connect\n                                    </Button>\n                                </div>\n                            </div> \n                        </FormControl>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Config from './components/Config';\n\nexport default class App extends React.Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <Header />\n\n                <Config />\n\n                <Footer />\n            </BrowserRouter>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}